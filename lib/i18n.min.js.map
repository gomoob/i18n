{"version":3,"sources":["i18n.min.js"],"names":["root","factory","define","amd","$","Polyglot","Editor","exports","require","module","_","this","oldPrototype","prototype","options","opts","phrases","extend","currentLocale","locale","allowMissing","transformPhrase","onMissingKey","warn","message","console","urlBuilder","phrasesCache","currentType","type","currentVersion","version","cache","newType","newVersion","Object","keys","length","load","forceReload","replace","success","Error","ajax","dataType","url","proxy","data","textStatus","jqXHR","error","errorThrown"],"mappings":"CAAC,SAASA,EAAMC,GAEZ,GAAID,GAA0B,kBAAXE,SAAyBA,OAAOC,IAE/CD,QAAQ,SAAU,iBAAkB,SAASE,EAAGC,GAE5C,MAAQL,GAAKM,OAASL,EAAQD,EAAMI,EAAGC,SAM1C,IAAuB,mBAAZE,SAAyB,CAErC,GAAIH,GAAII,QAAQ,UACZH,EAAWG,QAAQ,gBAEvBC,QAAOF,QAAUN,EAAQD,EAAMI,EAAGC,OAIlCL,GAAKM,OAASL,EAAQD,EAAMA,EAAKU,EAAGV,EAAKK,WAE/CM,KAAM,SAASX,EAAMI,EAAGC,GAEtB,YAaA,IAAIO,GAAeP,EAASQ,SA4K5B,OA3KAR,GAAW,SAASS,GAGhB,GAAIC,GAAOD,KACXH,MAAKK,WACLL,KAAKM,OAAOF,EAAKC,aACjBL,KAAKO,cAAgBH,EAAKI,QAAU,IACpC,IAAIC,GAAeL,EAAKK,aAAeC,gBAAkB,IACzDV,MAAKW,aAA4C,kBAAtBP,GAAKO,aAA8BP,EAAKO,aAAeF,EAClFT,KAAKY,KAAOR,EAAKQ,MAAQ,SAASC,GAC9BC,QAAQF,KAAK,YAAcC,IAG/Bb,KAAKe,WAAaX,EAAKW,WAMvBf,KAAKgB,gBACLhB,KAAKiB,YAAeb,GAAQA,EAAKc,KAAQd,EAAKc,KAAO,cACrDlB,KAAKmB,eAAkBf,GAAQA,EAAKgB,QAAWhB,EAAKgB,QAAU,cAG9DpB,KAAKqB,MAAMrB,KAAKiB,YAAajB,KAAKO,cAAeP,KAAKmB,eAAgBnB,KAAKK,UAG/EX,EAASQ,UAAYD,EASrBP,EAASQ,UAAUgB,KAAO,SAASI,GAE/B,MADIA,KAAStB,KAAKiB,YAAcK,GACzBtB,KAAKiB,aAUhBvB,EAASQ,UAAUkB,QAAU,SAASG,GAElC,MADIA,KAAYvB,KAAKmB,eAAiBI,GAC/BvB,KAAKmB,gBAGhBzB,EAASQ,UAAUmB,MAAQ,SAASH,EAAMV,EAAQY,EAASf,GAElB,IAArCmB,OAAOC,KAAKzB,KAAKK,SAASqB,SAErB1B,KAAKgB,aAAaE,KAClBlB,KAAKgB,aAAaE,OAGlBlB,KAAKgB,aAAaE,GAAMV,KACxBR,KAAKgB,aAAaE,GAAMV,OAG5BR,KAAKgB,aAAaE,GAAMV,GAAQY,GAAWf,IAgBhDX,EAASQ,UAAUyB,KAAO,SAASxB,GAE/B,GAAIK,GAASL,EAAQK,QAAUR,KAAKO,cAChCW,EAAOf,EAAQe,MAAQlB,KAAKiB,YAC5BG,EAAUjB,EAAQiB,SAAWpB,KAAKmB,cAGtC,KAAIhB,EAAQyB,aAGL5B,KAAKgB,aAAaE,IAASlB,KAAKgB,aAAaE,GAAMV,GAIlD,GAAGY,IAAYpB,KAAKgB,aAAaE,GAAMV,GAAQY,SAGpCpB,MAAKgB,aAAaE,GAAMV,OAW/B,IAHAR,KAAK6B,QAAQ7B,KAAKgB,aAAaE,GAAMV,GAAQY,IAG1CjB,GAAWA,EAAQ2B,QAIlB,WAFA3B,GAAQ2B,QAAQ9B,KAAKgB,aAAaE,GAAMV,GAAQY,GAahE,KAAIpB,KAAKe,WACL,KAAM,IAAIgB,OAAM,qCAQpBtC,GAAEuC,MAEMC,SAAW,OACXC,IAAMlC,KAAKe,WAAWG,EAAMV,EAAQY,GACpCU,QAAUrC,EAAE0C,MACR,SAASC,EAAMC,EAAYC,GAGvBtC,KAAK6B,QAAQO,GAGbpC,KAAKqB,MAAMH,EAAMV,EAAQY,EAASgB,GAG/BjC,GAAWA,EAAQ2B,SAElB3B,EAAQ2B,QAAQM,EAAMC,EAAYC,IAK1CtC,MAEJuC,MAAQ,SAASD,EAAOD,EAAYG,GAG7BrC,GAAWA,EAAQoC,OAElBpC,EAAQoC,MAAMD,EAAOD,EAAYG,OAU9C9C","file":"i18n.min.js","sourcesContent":["(function(root, factory) {\r\n    \r\n    if (root && typeof define === 'function' && define.amd) {\r\n        \r\n        define(['jquery', 'node-polyglot'], function($, Polyglot) {\r\n\r\n            return (root.Editor = factory(root, $, Polyglot));\r\n\r\n        });\r\n\r\n    }\r\n  \r\n    else if (typeof exports !== 'undefined') {\r\n\r\n        var $ = require('jquery');\r\n        var Polyglot = require('node-polyglot');\r\n        \r\n        module.exports = factory(root, $, Polyglot);\r\n\r\n    }\r\n    else {\r\n        root.Editor = factory(root, root._, root.Polyglot);\r\n    }\r\n}(this, function(root, $, Polyglot) {\r\n\r\n    'use strict';\r\n\r\n    /**\r\n     * Overwrites the Polyglot.js constructor to be able to manage additional options.\r\n     * \r\n     * @param {Object} options Options used to configure Polyglot.js.\r\n     * @param {Object} options.phrases The dictionary which contains the translations.\r\n     * @param {Object} options.locale The locale associated to the translations.\r\n     * @param {Object} options.type An arbitrary string which defines the type of the translation dictionary, this can \r\n     *        then be used in the application to manage multiple dictionaries. For example we could define a specific \r\n     *        dictionary for sub-application or sub-modules. \r\n     * @param {Function) options.urlBuilder A callback function used to build URLs where to load the translation files.\r\n     */\r\n    var oldPrototype = Polyglot.prototype;\r\n    Polyglot = function(options) {\r\n    \r\n        // Same code as the standard Polyglot constructor\r\n        var opts = options || {};\r\n        this.phrases = {};\r\n        this.extend(opts.phrases || {});\r\n        this.currentLocale = opts.locale || 'en';\r\n        var allowMissing = opts.allowMissing ? transformPhrase : null;\r\n        this.onMissingKey = typeof opts.onMissingKey === 'function' ? opts.onMissingKey : allowMissing;\r\n        this.warn = opts.warn || function(message) {\r\n            console.warn('WARNING: ' + message);\r\n        };\r\n        \r\n        this.urlBuilder = opts.urlBuilder;\r\n\r\n        /**\r\n         * A cache used to cache translations on client side, this cache allows to not request the server each time the \r\n         * `load` method is called.\r\n         */\r\n        this.phrasesCache = {};\r\n        this.currentType = (opts && opts.type) ? opts.type : '__default__';\r\n        this.currentVersion = (opts && opts.version) ? opts.version : '__default__';\r\n    \r\n        // Cache the first loaded translations\r\n        this.cache(this.currentType, this.currentLocale, this.currentVersion, this.phrases);\r\n    \r\n    };\r\n    Polyglot.prototype = oldPrototype;\r\n    \r\n    /**\r\n     * Get / set the type of the dictionary in use / to use.\r\n     * \r\n     * @param {String} newType The type of dictionary to use.\r\n     * \r\n     * @return {String} The type of dictionary in use.\r\n     */\r\n    Polyglot.prototype.type = function(newType) {\r\n        if (newType) this.currentType = newType;\r\n        return this.currentType;  \r\n    };\r\n    \r\n    /**\r\n     * Get / set the version of the dictionary in use / to use.\r\n     * \r\n     * @param {String} newVersion The version of dictionary to use.\r\n     * \r\n     * @return {String} The version of dictionary in use.\r\n     */\r\n    Polyglot.prototype.version = function(newVersion) {\r\n        if (newVersion) this.currentVersion = newVersion;\r\n        return this.currentVersion;  \r\n    };\r\n    \r\n    Polyglot.prototype.cache = function(type, locale, version, phrases) {\r\n    \r\n    \tif(Object.keys(this.phrases).length !== 0) {\r\n    \t\r\n\t        if(!this.phrasesCache[type]) {\r\n\t            this.phrasesCache[type] = {};\r\n\t        }\r\n\t        \r\n\t        if(!this.phrasesCache[type][locale]) {\r\n\t            this.phrasesCache[type][locale] = {};\r\n\t        }\r\n\t        \r\n\t        this.phrasesCache[type][locale][version] = phrases;\r\n    \r\n    \t}\r\n\r\n    },\r\n    \r\n    /**\r\n     * Function used to load new translations from a JSON file.\r\n     * \r\n     * @param {Object} options Options used to configure the loading.\r\n     * @param {Object} options.type The type of dictionary to load.\r\n     * @param {Object} options.locale The locale associated to the disctionary to load.\r\n     * @param {Object} options.version The version of the dictionary to load.\r\n     * @param {Object} options.forceReload Boolean used to indicate if the function should by-pass the translations \r\n     *        cache and always reload the translations using an HTTP request.\r\n     */\r\n    Polyglot.prototype.load = function(options) {\r\n\r\n        var locale = options.locale || this.currentLocale,\r\n            type = options.type || this.currentType, \r\n            version = options.version || this.currentVersion;\r\n    \r\n        // If the 'forceReload' option is false we try to find the translations from the cache\r\n        if(!options.forceReload) {\r\n            \r\n            // If translations are available in the cache\r\n            if(this.phrasesCache[type] && this.phrasesCache[type][locale]) {\r\n    \r\n                // If a version is provided and this version is not the one used in the cache we have to request \r\n                // translations again\r\n                if(version && !this.phrasesCache[type][locale][version]) {\r\n    \r\n                    // Be sure we remove the translations from the cache\r\n                    delete this.phrasesCache[type][locale];\r\n    \r\n                } \r\n                \r\n                // Otherwise get the translations from the cache, call the 'success' method and exist\r\n                else {\r\n                    \r\n                    // Replace the translations in use\r\n                    this.replace(this.phrasesCache[type][locale][version]);\r\n    \r\n                    // If a 'success' method has been provided\r\n                    if(options && options.success) {\r\n    \r\n                        options.success(this.phrasesCache[type][locale][version]);\r\n                        \r\n                        return;\r\n                    \r\n                    }\r\n    \r\n                }\r\n    \r\n            }\r\n            \r\n        }\r\n        \r\n        // A URL builder must have been defined\r\n        if(!this.urlBuilder) {\r\n            throw new Error('No \\'urlBuilder\\' has been defined !');\r\n        }\r\n    \r\n        // We can be here if\r\n        //  - The 'forceReload' option is true\r\n        //  - No translations have been found in the cache\r\n        //  - Translations have been found in the cache but the associated version is not the same as the provided \r\n        //    version\r\n        $.ajax(\r\n            {\r\n                dataType : 'json',\r\n                url : this.urlBuilder(type, locale, version), \r\n                success : $.proxy(\r\n                    function(data, textStatus, jqXHR) {\r\n    \r\n                        // Replace the translations in use\r\n                        this.replace(data);\r\n                        \r\n                        // Updates the translations cache\r\n                        this.cache(type, locale, version, data);\r\n    \r\n                        // If a 'success' method has been provided\r\n                        if(options && options.success) {\r\n                            \r\n                            options.success(data, textStatus, jqXHR);\r\n                        \r\n                        }\r\n    \r\n                    },\r\n                    this\r\n                ),\r\n                error : function(jqXHR, textStatus, errorThrown) {\r\n                    \r\n                    // If an 'error' method has been provided\r\n                    if(options && options.error) {\r\n                        \r\n                        options.error(jqXHR, textStatus, errorThrown);\r\n                        \r\n                    }\r\n    \r\n                }\r\n            }\r\n        );\r\n        \r\n    };\r\n    \r\n    return Polyglot;\r\n\r\n}));\r\n"],"sourceRoot":"/source/"}